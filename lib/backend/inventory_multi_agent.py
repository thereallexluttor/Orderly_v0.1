from phi.workflow import Workflow
from phi.agent import Agent
from phi.model.google import Gemini
from typing import Dict, Any, Optional
from pydantic import Field
import logging
import os
from dotenv import load_dotenv
import numpy as np
from scipy import stats
import pandas as pd
from statsmodels.tsa.seasonal import seasonal_decompose

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

if not GOOGLE_API_KEY:
    raise ValueError("GOOGLE_API_KEY no est치 configurada en las variables de entorno")

def convert_numpy_types(obj):
    """Convierte tipos de NumPy a tipos nativos de Python"""
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    return obj

class InventoryAnalysisSystem(Workflow):
    analyst: Optional[Agent] = Field(default=None)
    advisor: Optional[Agent] = Field(default=None)

    def __init__(self):
        super().__init__()
        logger.info("Inicializando sistema de an치lisis t칠cnico de inventario...")
        gemini_model = Gemini(api_key=GOOGLE_API_KEY)
        self._initialize_agents(gemini_model)

    def _initialize_agents(self, model):
        """Inicializa los agentes de an치lisis"""
        try:
            self.analyst = Agent(
                name="DataAnalyst",
                role="Analista de datos especializado en an치lisis estad칤stico",
                model=Gemini(id="gemini-1.5-flash"),
                description="Realizo an치lisis estad칤sticos descriptivos y de series temporales",
                instructions=[
                    "Analizar exclusivamente los datos proporcionados sin hacer suposiciones",
                    "Identificar patrones estad칤sticamente significativos en los datos",
                    "Calcular y reportar m칠tricas estad칤sticas clave",
                    "Detectar outliers y anomal칤as basadas en z-scores",
                    "Reportar hallazgos con intervalos de confianza cuando sea posible",
                    "Mantener un enfoque puramente cuantitativo",
                    "Agregar emojis al mensaje para que se vea m치s atractivo"
                ],
            )

            self.advisor = Agent(
                name="AdvancedAnalyst",
                role="Analista de datos avanzado especializado en correlaciones y patrones complejos",
                model=Gemini(id="gemini-1.5-flash"),
                description="Analizo patrones complejos y relaciones entre variables",
                instructions=[
                    "Realizar an치lisis de correlaciones entre variables",
                    "Identificar patrones c칤clicos y estacionales con significancia estad칤stica",
                    "Calcular m칠tricas avanzadas de variabilidad y tendencias",
                    "Analizar la descomposici칩n de series temporales",
                    "Reportar hallazgos basados 칰nicamente en evidencia estad칤stica",
                    "Complementar el an치lisis base con insights m치s profundos",
                    "agregar emojis al mensaje para que se vea m치s atractivo"
                ],
            )
            
        except Exception as e:
            logger.error(f"Error en inicializaci칩n: {str(e)}", exc_info=True)
            raise

    def _perform_statistical_analysis(self, history_data: list) -> dict:
        """Realiza an치lisis estad칤stico detallado de los datos hist칩ricos"""
        try:
            # Convertir datos hist칩ricos a DataFrame
            df = pd.DataFrame(history_data)
            df['created_at'] = pd.to_datetime(df['created_at'])
            df = df.set_index('created_at').sort_index()
            
            # An치lisis de series temporales
            usage_series = df['quantity']
            
            # Descomposici칩n de la serie temporal
            decomposition = seasonal_decompose(usage_series, period=7, model='additive')
            
            # Calcular estad칤sticas descriptivas
            stats_analysis = {
                "mean": usage_series.mean(),
                "median": usage_series.median(),
                "std": usage_series.std(),
                "cv": usage_series.std() / usage_series.mean() * 100,
                "skewness": stats.skew(usage_series),
                "kurtosis": stats.kurtosis(usage_series),
                "trend_slope": np.polyfit(range(len(usage_series)), usage_series, 1)[0],
                "seasonality_strength": np.std(decomposition.seasonal) / np.std(usage_series),
                "autocorrelation": usage_series.autocorr(),
            }
            
            # Detecci칩n de anomal칤as
            z_scores = np.abs(stats.zscore(usage_series))
            anomalies = (z_scores > 3).sum()
            stats_analysis["anomalies_count"] = anomalies
            
            return stats_analysis
            
        except Exception as e:
            logger.error(f"Error en an치lisis estad칤stico: {str(e)}", exc_info=True)
            return {}

    def analyze_inventory(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """Ejecuta el workflow de an치lisis de inventario"""
        try:
            stats_analysis = self._perform_statistical_analysis(context["history"])
            stats_analysis = {k: convert_numpy_types(v) for k, v in stats_analysis.items()}
            
            # Prompt para an치lisis estad칤stico base
            analysis_prompt = f"""
            DATOS NUM칄RICOS PARA AN츼LISIS:
            - Serie temporal de uso: {context['history']}

            游늵 DATOS ESTAD칈STICOS:
            - Media de uso: {stats_analysis['mean']:.2f} {context['unit']}/d칤a
            - Desviaci칩n est치ndar: {stats_analysis['std']:.2f}
            - Coeficiente de variaci칩n: {stats_analysis['cv']:.2f}%
            - Tendencia: {stats_analysis['trend_slope']:.2f}
            - Estacionalidad: {stats_analysis['seasonality_strength']:.2f}
            - Anomal칤as detectadas: {stats_analysis['anomalies_count']}

            游닍 INVENTARIO ACTUAL:
            - Stock actual: {context['current_stock']} {context['unit']}
            - Stock total: {context['total_stock']} {context['unit']}
            - Factor de seguridad: {context['safe_factor']}%

            M칠tricas estad칤sticas calculadas:
            {stats_analysis}

            Realiza un an치lisis puramente estad칤stico de estos datos. 
            Reporta solo hallazgos respaldados por los n칰meros y tests estad칤sticos.
            No hagas suposiciones ni recomendaciones.
            """

            analysis = self.analyst.run(analysis_prompt)

            # Prompt para an치lisis avanzado
            advanced_prompt = f"""
            AN츼LISIS BASE PREVIO:
            {analysis.content if hasattr(analysis, 'content') else str(analysis)}

            DATOS ADICIONALES PARA AN츼LISIS AVANZADO:
            - Serie temporal completa: {context['history']}
            - M칠tricas calculadas: {stats_analysis}

            Realiza un an치lisis estad칤stico avanzado enfoc치ndote en:
            1. Correlaciones significativas encontradas
            2. Patrones c칤clicos con significancia estad칤stica
            3. Componentes de la descomposici칩n de series temporales
            4. An치lisis de variabilidad y tendencias
            
            Reporta solo hallazgos respaldados por tests estad칤sticos.
            No incluyas suposiciones ni recomendaciones.
            """
            
            advanced_analysis = self.advisor.run(advanced_prompt)

            return {
                "status": "success",
                "analysis": analysis.content if hasattr(analysis, 'content') else str(analysis),
                "recommendations": advanced_analysis.content if hasattr(advanced_analysis, 'content') else str(advanced_analysis),
                "statistical_data": stats_analysis
            }

        except Exception as e:
            logger.error(f"Error en an치lisis: {str(e)}", exc_info=True)
            return {
                "status": "error",
                "message": str(e),
                "analysis": "Error en an치lisis estad칤stico",
                "recommendations": "Error en an치lisis avanzado"
            }

